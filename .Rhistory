plot(MR, MR_chance)
0.6*0.1
MR_age_impact_val/ages
MR_age_impact_val/(ages+MR_age_impact_val)
MR_chance <- MR_age_impact_val/(ages+MR_age_impact_val) * MR * MR_death_impact_val
plot(MR, MR_chance)
MR_chance <- (ages-MR_age_impact_val)/(ages+MR_age_impact_val) * MR * MR_death_impact_val
plot(MR, MR_chance)
ages
MR_age_impact_val
MR_chance <- ages/(ages+MR_age_impact_val) * MR * MR_death_impact_val
plot(MR, MR_chance)
MR_death_impact_val
MR
## Function - Disturbance function impacts
## Inputs
# pop - Population
# dist_togg - Turn on and off disturbance presence
# disturbance_age_struct - Impact value flat or varied by age
# dist_prob - Base chance of a disturbance event
# dist_impact_val - Level of impact
# dist_age_impact_val - Impact of age on disturbance (inflection point of exponential function)
##################################################################################
disturbance_event_chance <- function(dist_togg, disturbance_age_struct, dist_prob, dist_impact_val, dist_age_impact_val){
dist_event=FALSE
if (dist_togg){
pop=curr_pop
# Does a disturbance occur?
disturbance_size_chance <- rbeta(n=1, 5, 1) # exponential chance of size from 0 -1 impact
disturbance_size <- 1-disturbance_size_chance
dist_event <- rbinom(1,1,disturbance_size_chance) # lower disturbances have a higher chance
if (as.logical(dist_event) & disturbance_age_struct=="complex"){
#cat("Disturbance size of", round(disturbance_size,2),"at:", time_point,"!🔥🔥🔥 \n")
ages <- pop$age
disturbance_age_imp  <- disturbance_size * dist_impact_val * (1/(1+exp((ages-dist_age_impact_val)/10)))
age_impact_new <- age_impact * (1+disturbance_age_imp)
MR_death_impact_new <- MR_death_impact * (1+disturbance_age_imp)
recruitment_const_new <- recruitment_const * (1+disturbance_age_imp)
}
if (as.logical(dist_event) & disturbance_age_struct=="flat"){
age_impact_new <- age_impact * (1+dist_impact_val)
MR_death_impact_new <- MR_death_impact * (1+dist_impact_val)
recruitment_const_new <- recruitment_const * (1+dist_impact_val)
}
else {
age_impact_new=age_impact
MR_death_impact_new=MR_death_impact
recruitment_const_new=recruitment_const
}
results <- as.vector(c(dist_event, age_impact_new, MR_death_impact_new, recruitment_const_new, age_impact, MR_death_impact, recruitment_const))
return(results)
} else {
return()
}
}
set.seed(12345)
rm(list = ls())
setwd("C:/Users/swirl/OneDrive/Documents/Uni/Doctorate/Simulation/")
## Load in libraries
library(tidyverse)
## Load in parameters
source("configurations")
source("Functions/mortality_functions.R")
source("Functions/recruitment_functions.R")
source("Functions/disturbance_functions.R")
## Initiate random population
init_MR <- rnorm(n=population_size, mean = MR_mean, sd = MR_sd); init_MR[init_MR<0]=0
init_age <- as.integer(runif(n=population_size, min=1, max=100))
indiv_ID <- seq(from=1, to=population_size)
pop_df <- list(
indiv_ID = indiv_ID,
time = rep(1, length(indiv_ID)),
MR = init_MR,
mortality = rep(0, length(indiv_ID)),
age = init_age
)
## Initialise objects
indiv_pop=NULL
MR_pop=NULL
curr_pop=NULL
new_recruit_pop=NULL
indiv_count=0
death_df=NULL
age_df=NULL
MR_df=NULL
live_size_df=NULL
pop_timepoints=NULL
dist_event=FALSE
for (time_point in 1:time_max){
disturbance_event <- disturbance_event_chance (dist_togg = dist_imp, disturbance_age_struct = disturbance_age_struct_type, dist_impact_val = dist_impact, dist_age_impact_val = dist_age_impact)
# Apply disturbance results
disturbance_event_res <- disturbance_event[1]; age_impact = disturbance_event[2]; MR_death_impact = disturbance_event[3]; recruitment_const = disturbance_event[4]
if(time_point==1){
curr_pop <- pop_df
} else {
curr_pop <- lapply(curr_pop_end, function(x) x[curr_pop_end$time==time_point])
}
if((length(curr_pop$indiv_ID)==0)) {
stop("All dead at time ", time_point, "\n")
} else{
indiv_count=length(unique(curr_pop$indiv_ID)) + indiv_count
indiv_alive_count=nrow(curr_pop$indiv_ID)
## Recruitment
curr_pop <- recruit_rate(pop=curr_pop, recruitment_age=recruitment_age, population_min_size=population_minimum_size, recruitment_size_mean=recruitment_mean, recruitment_size_sd=recruitment_sd, recruitment_constant=recruitment_const, MR_togg=MR_recruit_imp, MR_recruit_impact_val=MR_recruit_impact)
indiv_death <- mortality_death_rate(pop=curr_pop, population_capacity=population_carrying_capacity, comp_togg=comp_imp, comp_impact_val=comp_impact, MR_togg=MR_imp, MR_death_impact_val=MR_death_impact, MR_age_impact_val=MR_age_impact, age_impact_val=age_impact, mortality_age_shiftch=mortality_age_shift)
death_df_curr <- data.frame(Dead_ID=curr_pop$indiv_ID[as.logical(indiv_death)], age=curr_pop$age[as.logical(indiv_death)], MR=curr_pop$MR[as.logical(indiv_death)], time=curr_pop$time[as.logical(indiv_death)])
death_df <- rbind(death_df, death_df_curr)
# Generate summary data if not dead
if (length(curr_pop$indiv_ID)>sum(indiv_death)){
MR_summ <- data.frame(time=time_point, MR_mean_summ=mean(curr_pop$MR[!as.logical(indiv_death)], na.rm=TRUE), MR_sd_summ=sd(curr_pop$MR[!as.logical(indiv_death)]))
MR_df <- rbind(MR_df, MR_summ)
age_summ <- data.frame(time=time_point, age_mean_summ=mean(curr_pop$age[!as.logical(indiv_death)]), age_sd_summ=sd(curr_pop$age[!as.logical(indiv_death)]),pop_size=length(curr_pop$indiv_ID))
age_df <- rbind(age_df, age_summ)
}
live_size <- data.frame(time=time_point, sum_size=length(curr_pop$indiv_ID[!as.logical(indiv_death)]))
live_size_df <- rbind(live_size_df, live_size)
curr_pop_end <- list(indiv_ID=curr_pop$indiv_ID[!as.logical(indiv_death)], age=curr_pop$age[!as.logical(indiv_death)]+1, MR=curr_pop$MR[!as.logical(indiv_death)], time=curr_pop$time[!as.logical(indiv_death)]+1)
# Save populations at user designated timepoints
if (!is.null(timepoint_pop_grab) && (time_point %in% timepoint_pop_grab)){
i <- which(time_point == timepoint_pop_grab)
pop_timepoints[[i]] <- curr_pop_end
}
# Return to base
if (as.logical(disturbance_event[1])){
age_impact = disturbance_event[5]
MR_death_impact = disturbance_event[6]
recruitment_const = disturbance_event[7]
}
# Verbose 🗣️
if(time_point%%output_timept == 0){
cat("Time at:", time_point,"\n",
"Individuals alive:", length(curr_pop_end$indiv_ID), "\n",
"Mean MR of live individuals:", mean(curr_pop$MR[!as.logical(indiv_death)]), "\n")
# Plots
print(ggplot() + geom_histogram(data=data.frame(curr_pop_end), aes(x=age, y = after_stat(density)), binwidth=10) + theme_bw() + labs(title=paste("Age density at", time_point)))
print(ggplot() + geom_point(data=data.frame(curr_pop_end), aes(x=age, y=MR)) + theme_bw() + labs(title=paste("MR by age at", time_point)))
}
}
}
pop <- pop_timepoints[[5]]
# Age death
ages <- pop$age
age_mortality_chance <- numeric(length(ages))
for (i in seq_along(ages)) {
x <- ages[i]
if (x <= mortality_age_shiftch) {
age_mortality_chance[i] <- young_mortality(x, age_impact_val)
} else {
age_mortality_chance[i] <- mature_mortality(x, age_impact_val, mortality_age_shiftch)
}
}
age_mortality_chance[age_mortality_chance > 1] <- 1 # remove anomaly high and low vals
mortality_age_shiftch=100
age_mortality_chance <- numeric(length(ages))
for (i in seq_along(ages)) {
x <- ages[i]
if (x <= mortality_age_shiftch) {
age_mortality_chance[i] <- young_mortality(x, age_impact_val)
} else {
age_mortality_chance[i] <- mature_mortality(x, age_impact_val, mortality_age_shiftch)
}
}
age_mortality_chance[age_mortality_chance > 1] <- 1 # remove anomaly high and low vals
age_impact_val=0.1
age_mortality_chance <- numeric(length(ages))
for (i in seq_along(ages)) {
x <- ages[i]
if (x <= mortality_age_shiftch) {
age_mortality_chance[i] <- young_mortality(x, age_impact_val)
} else {
age_mortality_chance[i] <- mature_mortality(x, age_impact_val, mortality_age_shiftch)
}
}
age_mortality_chance[age_mortality_chance > 1] <- 1 # remove anomaly high and low vals
age_mortality_chance[age_mortality_chance < 0] <- 0 # remove anomaly high and low vals
# MR chance by death
MR <- pop$MR
MR_chance <- ages/(ages+MR_age_impact_val) * MR * MR_death_impact_val
MR_age_impact_val=20
MR_death_impact_val=0.1
MR_chance <- ages/(ages+MR_age_impact_val) * MR * MR_death_impact_val
MR_chance
plot(MR, MR_chance)
final_mortality_chance_norm <- rescale(MR_chance+age_mortality_chance, c(0,1))
final_mortality_chance_norm
hist(final_mortality_chance_norm)
hist(MR_chance)
ages
(ages+MR_age_impact_val)
plot(ages, ages/(ages+MR_age_impact_val))
plot(ages, ages/(ages-MR_age_impact_val))
MR_chance <- (ages-MR_age_impact_val)/(ages+MR_age_impact_val) * MR * MR_death_impact_val
plot(ages, ages/(ages-MR_age_impact_val))
MR_chance <- (ages-MR_age_impact_val)/(ages+MR_age_impact_val) * MR * MR_death_impact_val
plot(ages, ages/(ages-MR_age_impact_val))
plot(ages, MR_chance)
plot(ages, (ages+MR_age_impact_val)/(ages-MR_age_impact_val))
plot(ages, (MR_age_impact_val)/(ages-MR_age_impact_val))
plot(ages, (ages+MR_age_impact_val)/(MR_age_impact_val))
plot(ages, (ages-MR_age_impact_val)/(ages))
plot(ages, ages/(ages-MR_age_impact_val))
plot(ages, (ages-MR_age_impact_val)/(ages))
plot(ages, (ages+MR_age_impact_val)/(ages))
MR_chance <- (ages+MR_age_impact_val)/(ages) * MR * MR_death_impact_val; MR_chance <- rescale(MR_chance, to = c(0,1))
plot(MR, MR_chance)
# If both toggle is off
if (!MR_togg & !comp_togg)  { # If MR toggle is on but not competition
final_mortality_chance_norm <- rescale(age_mortality_chance, to=c(0,1))
}
# If MR toggle is on but not competition
if (MR_togg & !comp_togg)  { # If MR toggle is on but not competition
final_mortality_chance_norm <- rescale(MR_chance+age_mortality_chance, c(0,1))
}
final_mortality_chance_norm <- rescale(MR_chance+age_mortality_chance, c(0,1))
hist(final_mortality_chance_norm)
set.seed(12345)
rm(list = ls())
setwd("C:/Users/swirl/OneDrive/Documents/Uni/Doctorate/Simulation/")
## Load in libraries
library(tidyverse)
## Load in parameters
source("configurations")
source("Functions/mortality_functions.R")
source("Functions/recruitment_functions.R")
source("Functions/disturbance_functions.R")
## Initiate random population
init_MR <- rnorm(n=population_size, mean = MR_mean, sd = MR_sd); init_MR[init_MR<0]=0
init_age <- as.integer(runif(n=population_size, min=1, max=100))
indiv_ID <- seq(from=1, to=population_size)
pop_df <- list(
indiv_ID = indiv_ID,
time = rep(1, length(indiv_ID)),
MR = init_MR,
mortality = rep(0, length(indiv_ID)),
age = init_age
)
## Initialise objects
indiv_pop=NULL
MR_pop=NULL
curr_pop=NULL
new_recruit_pop=NULL
indiv_count=0
death_df=NULL
age_df=NULL
MR_df=NULL
live_size_df=NULL
pop_timepoints=NULL
dist_event=FALSE
for (time_point in 1:time_max){
disturbance_event <- disturbance_event_chance (dist_togg = dist_imp, disturbance_age_struct = disturbance_age_struct_type, dist_impact_val = dist_impact, dist_age_impact_val = dist_age_impact)
# Apply disturbance results
disturbance_event_res <- disturbance_event[1]; age_impact = disturbance_event[2]; MR_death_impact = disturbance_event[3]; recruitment_const = disturbance_event[4]
if(time_point==1){
curr_pop <- pop_df
} else {
curr_pop <- lapply(curr_pop_end, function(x) x[curr_pop_end$time==time_point])
}
if((length(curr_pop$indiv_ID)==0)) {
stop("All dead at time ", time_point, "\n")
} else{
indiv_count=length(unique(curr_pop$indiv_ID)) + indiv_count
indiv_alive_count=nrow(curr_pop$indiv_ID)
## Recruitment
curr_pop <- recruit_rate(pop=curr_pop, recruitment_age=recruitment_age, population_min_size=population_minimum_size, recruitment_size_mean=recruitment_mean, recruitment_size_sd=recruitment_sd, recruitment_constant=recruitment_const, MR_togg=MR_recruit_imp, MR_recruit_impact_val=MR_recruit_impact)
indiv_death <- mortality_death_rate(pop=curr_pop, population_capacity=population_carrying_capacity, comp_togg=comp_imp, comp_impact_val=comp_impact, MR_togg=MR_imp, MR_death_impact_val=MR_death_impact, MR_age_impact_val=MR_age_impact, age_impact_val=age_impact, mortality_age_shiftch=mortality_age_shift)
death_df_curr <- data.frame(Dead_ID=curr_pop$indiv_ID[as.logical(indiv_death)], age=curr_pop$age[as.logical(indiv_death)], MR=curr_pop$MR[as.logical(indiv_death)], time=curr_pop$time[as.logical(indiv_death)])
death_df <- rbind(death_df, death_df_curr)
# Generate summary data if not dead
if (length(curr_pop$indiv_ID)>sum(indiv_death)){
MR_summ <- data.frame(time=time_point, MR_mean_summ=mean(curr_pop$MR[!as.logical(indiv_death)], na.rm=TRUE), MR_sd_summ=sd(curr_pop$MR[!as.logical(indiv_death)]))
MR_df <- rbind(MR_df, MR_summ)
age_summ <- data.frame(time=time_point, age_mean_summ=mean(curr_pop$age[!as.logical(indiv_death)]), age_sd_summ=sd(curr_pop$age[!as.logical(indiv_death)]),pop_size=length(curr_pop$indiv_ID))
age_df <- rbind(age_df, age_summ)
}
live_size <- data.frame(time=time_point, sum_size=length(curr_pop$indiv_ID[!as.logical(indiv_death)]))
live_size_df <- rbind(live_size_df, live_size)
curr_pop_end <- list(indiv_ID=curr_pop$indiv_ID[!as.logical(indiv_death)], age=curr_pop$age[!as.logical(indiv_death)]+1, MR=curr_pop$MR[!as.logical(indiv_death)], time=curr_pop$time[!as.logical(indiv_death)]+1)
# Save populations at user designated timepoints
if (!is.null(timepoint_pop_grab) && (time_point %in% timepoint_pop_grab)){
i <- which(time_point == timepoint_pop_grab)
pop_timepoints[[i]] <- curr_pop_end
}
# Return to base
if (as.logical(disturbance_event[1])){
age_impact = disturbance_event[5]
MR_death_impact = disturbance_event[6]
recruitment_const = disturbance_event[7]
}
# Verbose 🗣️
if(time_point%%output_timept == 0){
cat("Time at:", time_point,"\n",
"Individuals alive:", length(curr_pop_end$indiv_ID), "\n",
"Mean MR of live individuals:", mean(curr_pop$MR[!as.logical(indiv_death)]), "\n")
# Plots
print(ggplot() + geom_histogram(data=data.frame(curr_pop_end), aes(x=age, y = after_stat(density)), binwidth=10) + theme_bw() + labs(title=paste("Age density at", time_point)))
print(ggplot() + geom_point(data=data.frame(curr_pop_end), aes(x=age, y=MR)) + theme_bw() + labs(title=paste("MR by age at", time_point)))
}
}
}
# Post-run plots
mean_MR_time_death <- death_df %>% group_by(time) %>% summarise(mean_MR=mean(MR), sd_MR=sd(MR))
plot_livesize <- ggplot() + geom_point(data=live_size_df, aes(x=time, y=sum_size)) + labs(title="Live population size")
plot_liveage  <- ggplot() +
geom_point(data=age_df, aes(x=time, y=age_mean_summ)) +
geom_errorbar(data=age_df, aes(x=time, ymax = age_mean_summ + age_sd_summ, ymin = age_mean_summ - age_sd_summ)) + labs(title="Live age")
plot_deadMR   <- ggplot(mean_MR_time_death, aes(x=time, y=mean_MR)) + geom_point() + labs(title="Death MR")
plot_liveMR   <- ggplot() +
geom_point(data=MR_df, aes(x=time, y = MR_mean_summ)) +
geom_errorbar(data=MR_df, aes(x=time, ymax = MR_mean_summ + MR_sd_summ, ymin = MR_mean_summ - MR_sd_summ)) +
stat_smooth(data=MR_df, aes(x=time, y = MR_mean_summ), linewidth = 0.75, linetype="dashed", colour="grey40", span=10) +
labs(title="Live MR")
library(patchwork)
plot_livesize / plot_liveage
plot_deadMR / plot_liveMR
set.seed(12345)
rm(list = ls())
setwd("C:/Users/swirl/OneDrive/Documents/Uni/Doctorate/Simulation/")
## Load in libraries
library(tidyverse)
## Load in parameters
source("configurations")
source("Functions/mortality_functions.R")
source("Functions/recruitment_functions.R")
source("Functions/disturbance_functions.R")
## Initiate random population
init_MR <- rnorm(n=population_size, mean = MR_mean, sd = MR_sd); init_MR[init_MR<0]=0
init_age <- as.integer(runif(n=population_size, min=1, max=100))
indiv_ID <- seq(from=1, to=population_size)
pop_df <- list(
indiv_ID = indiv_ID,
time = rep(1, length(indiv_ID)),
MR = init_MR,
mortality = rep(0, length(indiv_ID)),
age = init_age
)
## Initialise objects
indiv_pop=NULL
MR_pop=NULL
curr_pop=NULL
new_recruit_pop=NULL
indiv_count=0
death_df=NULL
age_df=NULL
MR_df=NULL
live_size_df=NULL
pop_timepoints=NULL
dist_event=FALSE
for (time_point in 1:time_max){
disturbance_event <- disturbance_event_chance (dist_togg = dist_imp, disturbance_age_struct = disturbance_age_struct_type, dist_impact_val = dist_impact, dist_age_impact_val = dist_age_impact)
# Apply disturbance results
disturbance_event_res <- disturbance_event[1]; age_impact = disturbance_event[2]; MR_death_impact = disturbance_event[3]; recruitment_const = disturbance_event[4]
if(time_point==1){
curr_pop <- pop_df
} else {
curr_pop <- lapply(curr_pop_end, function(x) x[curr_pop_end$time==time_point])
}
if((length(curr_pop$indiv_ID)==0)) {
stop("All dead at time ", time_point, "\n")
} else{
indiv_count=length(unique(curr_pop$indiv_ID)) + indiv_count
indiv_alive_count=nrow(curr_pop$indiv_ID)
## Recruitment
curr_pop <- recruit_rate(pop=curr_pop, recruitment_age=recruitment_age, population_min_size=population_minimum_size, recruitment_size_mean=recruitment_mean, recruitment_size_sd=recruitment_sd, recruitment_constant=recruitment_const, MR_togg=MR_recruit_imp, MR_recruit_impact_val=MR_recruit_impact)
indiv_death <- mortality_death_rate(pop=curr_pop, population_capacity=population_carrying_capacity, comp_togg=comp_imp, comp_impact_val=comp_impact, MR_togg=MR_imp, MR_death_impact_val=MR_death_impact, MR_age_impact_val=MR_age_impact, age_impact_val=age_impact, mortality_age_shiftch=mortality_age_shift)
death_df_curr <- data.frame(Dead_ID=curr_pop$indiv_ID[as.logical(indiv_death)], age=curr_pop$age[as.logical(indiv_death)], MR=curr_pop$MR[as.logical(indiv_death)], time=curr_pop$time[as.logical(indiv_death)])
death_df <- rbind(death_df, death_df_curr)
# Generate summary data if not dead
if (length(curr_pop$indiv_ID)>sum(indiv_death)){
MR_summ <- data.frame(time=time_point, MR_mean_summ=mean(curr_pop$MR[!as.logical(indiv_death)], na.rm=TRUE), MR_sd_summ=sd(curr_pop$MR[!as.logical(indiv_death)]))
MR_df <- rbind(MR_df, MR_summ)
age_summ <- data.frame(time=time_point, age_mean_summ=mean(curr_pop$age[!as.logical(indiv_death)]), age_sd_summ=sd(curr_pop$age[!as.logical(indiv_death)]),pop_size=length(curr_pop$indiv_ID))
age_df <- rbind(age_df, age_summ)
}
live_size <- data.frame(time=time_point, sum_size=length(curr_pop$indiv_ID[!as.logical(indiv_death)]))
live_size_df <- rbind(live_size_df, live_size)
curr_pop_end <- list(indiv_ID=curr_pop$indiv_ID[!as.logical(indiv_death)], age=curr_pop$age[!as.logical(indiv_death)]+1, MR=curr_pop$MR[!as.logical(indiv_death)], time=curr_pop$time[!as.logical(indiv_death)]+1)
# Save populations at user designated timepoints
if (!is.null(timepoint_pop_grab) && (time_point %in% timepoint_pop_grab)){
i <- which(time_point == timepoint_pop_grab)
pop_timepoints[[i]] <- curr_pop_end
}
# Return to base
if (as.logical(disturbance_event[1])){
age_impact = disturbance_event[5]
MR_death_impact = disturbance_event[6]
recruitment_const = disturbance_event[7]
}
# Verbose 🗣️
if(time_point%%output_timept == 0){
cat("Time at:", time_point,"\n",
"Individuals alive:", length(curr_pop_end$indiv_ID), "\n",
"Mean MR of live individuals:", mean(curr_pop$MR[!as.logical(indiv_death)]), "\n")
# Plots
print(ggplot() + geom_histogram(data=data.frame(curr_pop_end), aes(x=age, y = after_stat(density)), binwidth=10) + theme_bw() + labs(title=paste("Age density at", time_point)))
print(ggplot() + geom_point(data=data.frame(curr_pop_end), aes(x=age, y=MR)) + theme_bw() + labs(title=paste("MR by age at", time_point)))
}
}
}
# Post-run plots
mean_MR_time_death <- death_df %>% group_by(time) %>% summarise(mean_MR=mean(MR), sd_MR=sd(MR))
plot_livesize <- ggplot() + geom_point(data=live_size_df, aes(x=time, y=sum_size)) + labs(title="Live population size")
plot_liveage  <- ggplot() +
geom_point(data=age_df, aes(x=time, y=age_mean_summ)) +
geom_errorbar(data=age_df, aes(x=time, ymax = age_mean_summ + age_sd_summ, ymin = age_mean_summ - age_sd_summ)) + labs(title="Live age")
plot_deadMR   <- ggplot(mean_MR_time_death, aes(x=time, y=mean_MR)) + geom_point() + labs(title="Death MR")
plot_liveMR   <- ggplot() +
geom_point(data=MR_df, aes(x=time, y = MR_mean_summ)) +
geom_errorbar(data=MR_df, aes(x=time, ymax = MR_mean_summ + MR_sd_summ, ymin = MR_mean_summ - MR_sd_summ)) +
stat_smooth(data=MR_df, aes(x=time, y = MR_mean_summ), linewidth = 0.75, linetype="dashed", colour="grey40", span=10) +
labs(title="Live MR")
library(patchwork)
plot_livesize / plot_liveage
plot_deadMR / plot_liveMR
set.seed(12345)
rm(list = ls())
setwd("C:/Users/swirl/OneDrive/Documents/Uni/Doctorate/Simulation/")
## Load in libraries
library(tidyverse)
## Load in parameters
source("configurations")
source("Functions/mortality_functions.R")
source("Functions/recruitment_functions.R")
source("Functions/disturbance_functions.R")
## Initiate random population
init_MR <- rnorm(n=population_size, mean = MR_mean, sd = MR_sd); init_MR[init_MR<0]=0
init_age <- as.integer(runif(n=population_size, min=1, max=100))
indiv_ID <- seq(from=1, to=population_size)
pop_df <- list(
indiv_ID = indiv_ID,
time = rep(1, length(indiv_ID)),
MR = init_MR,
mortality = rep(0, length(indiv_ID)),
age = init_age
)
## Initialise objects
indiv_pop=NULL
MR_pop=NULL
curr_pop=NULL
new_recruit_pop=NULL
indiv_count=0
death_df=NULL
age_df=NULL
MR_df=NULL
live_size_df=NULL
pop_timepoints=NULL
dist_event=FALSE
for (time_point in 1:time_max){
disturbance_event <- disturbance_event_chance (dist_togg = dist_imp, disturbance_age_struct = disturbance_age_struct_type, dist_impact_val = dist_impact, dist_age_impact_val = dist_age_impact)
# Apply disturbance results
disturbance_event_res <- disturbance_event[1]; age_impact = disturbance_event[2]; MR_death_impact = disturbance_event[3]; recruitment_const = disturbance_event[4]
if(time_point==1){
curr_pop <- pop_df
} else {
curr_pop <- lapply(curr_pop_end, function(x) x[curr_pop_end$time==time_point])
}
if((length(curr_pop$indiv_ID)==0)) {
stop("All dead at time ", time_point, "\n")
} else{
indiv_count=length(unique(curr_pop$indiv_ID)) + indiv_count
indiv_alive_count=nrow(curr_pop$indiv_ID)
## Recruitment
curr_pop <- recruit_rate(pop=curr_pop, recruitment_age=recruitment_age, population_min_size=population_minimum_size, recruitment_size_mean=recruitment_mean, recruitment_size_sd=recruitment_sd, recruitment_constant=recruitment_const, MR_togg=MR_recruit_imp, MR_recruit_impact_val=MR_recruit_impact)
indiv_death <- mortality_death_rate(pop=curr_pop, population_capacity=population_carrying_capacity, comp_togg=comp_imp, comp_impact_val=comp_impact, MR_togg=MR_imp, MR_death_impact_val=MR_death_impact, MR_age_impact_val=MR_age_impact, age_impact_val=age_impact, mortality_age_shiftch=mortality_age_shift)
death_df_curr <- data.frame(Dead_ID=curr_pop$indiv_ID[as.logical(indiv_death)], age=curr_pop$age[as.logical(indiv_death)], MR=curr_pop$MR[as.logical(indiv_death)], time=curr_pop$time[as.logical(indiv_death)])
death_df <- rbind(death_df, death_df_curr)
# Generate summary data if not dead
if (length(curr_pop$indiv_ID)>sum(indiv_death)){
MR_summ <- data.frame(time=time_point, MR_mean_summ=mean(curr_pop$MR[!as.logical(indiv_death)], na.rm=TRUE), MR_sd_summ=sd(curr_pop$MR[!as.logical(indiv_death)]))
MR_df <- rbind(MR_df, MR_summ)
age_summ <- data.frame(time=time_point, age_mean_summ=mean(curr_pop$age[!as.logical(indiv_death)]), age_sd_summ=sd(curr_pop$age[!as.logical(indiv_death)]),pop_size=length(curr_pop$indiv_ID))
age_df <- rbind(age_df, age_summ)
}
live_size <- data.frame(time=time_point, sum_size=length(curr_pop$indiv_ID[!as.logical(indiv_death)]))
live_size_df <- rbind(live_size_df, live_size)
curr_pop_end <- list(indiv_ID=curr_pop$indiv_ID[!as.logical(indiv_death)], age=curr_pop$age[!as.logical(indiv_death)]+1, MR=curr_pop$MR[!as.logical(indiv_death)], time=curr_pop$time[!as.logical(indiv_death)]+1)
# Save populations at user designated timepoints
if (!is.null(timepoint_pop_grab) && (time_point %in% timepoint_pop_grab)){
i <- which(time_point == timepoint_pop_grab)
pop_timepoints[[i]] <- curr_pop_end
}
# Return to base
if (as.logical(disturbance_event[1])){
age_impact = disturbance_event[5]
MR_death_impact = disturbance_event[6]
recruitment_const = disturbance_event[7]
}
# Verbose 🗣️
if(time_point%%output_timept == 0){
cat("Time at:", time_point,"\n",
"Individuals alive:", length(curr_pop_end$indiv_ID), "\n",
"Mean MR of live individuals:", mean(curr_pop$MR[!as.logical(indiv_death)]), "\n")
# Plots
print(ggplot() + geom_histogram(data=data.frame(curr_pop_end), aes(x=age, y = after_stat(density)), binwidth=10) + theme_bw() + labs(title=paste("Age density at", time_point)))
print(ggplot() + geom_point(data=data.frame(curr_pop_end), aes(x=age, y=MR)) + theme_bw() + labs(title=paste("MR by age at", time_point)))
}
}
}
# Post-run plots
mean_MR_time_death <- death_df %>% group_by(time) %>% summarise(mean_MR=mean(MR), sd_MR=sd(MR))
plot_livesize <- ggplot() + geom_point(data=live_size_df, aes(x=time, y=sum_size)) + labs(title="Live population size")
plot_liveage  <- ggplot() +
geom_point(data=age_df, aes(x=time, y=age_mean_summ)) +
geom_errorbar(data=age_df, aes(x=time, ymax = age_mean_summ + age_sd_summ, ymin = age_mean_summ - age_sd_summ)) + labs(title="Live age")
plot_deadMR   <- ggplot(mean_MR_time_death, aes(x=time, y=mean_MR)) + geom_point() + labs(title="Death MR")
plot_liveMR   <- ggplot() +
geom_point(data=MR_df, aes(x=time, y = MR_mean_summ)) +
geom_errorbar(data=MR_df, aes(x=time, ymax = MR_mean_summ + MR_sd_summ, ymin = MR_mean_summ - MR_sd_summ)) +
stat_smooth(data=MR_df, aes(x=time, y = MR_mean_summ), linewidth = 0.75, linetype="dashed", colour="grey40", span=10) +
labs(title="Live MR")
library(patchwork)
plot_livesize / plot_liveage
plot_deadMR / plot_liveMR
