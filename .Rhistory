set.seed(12345)
rm(list = ls())
setwd("C:/Users/swirl/OneDrive/Documents/Uni/Doctorate/Simulation/")
## Load in libraries
library(tidyverse)
## Load in parameters
source("configurations")
source("Functions/mortality_functions.R")
source("Functions/recruitment_functions.R")
source("Functions/disturbance_functions.R")
## Initiate random population
init_MR <- rnorm(n=population_size, mean = MR_mean, sd = MR_sd); init_MR[init_MR<0]=0
init_age <- as.integer(runif(n=population_size, min=1, max=100))
indiv_ID <- seq(from=1, to=population_size)
pop_df <- list(
indiv_ID = indiv_ID,
time = rep(1, length(indiv_ID)),
MR = init_MR,
mortality = rep(0, length(indiv_ID)),
age = init_age
)
## Initialise objects
indiv_pop=NULL
MR_pop=NULL
curr_pop=NULL
new_recruit_pop=NULL
indiv_count=0
death_df=NULL
age_df=NULL
MR_df=NULL
live_size_df=NULL
pop_timepoints=NULL
dist_event=FALSE
for (time_point in 1:time_max){
disturbance_event <- disturbance_event_chance (dist_togg = dist_imp, disturbance_age_struct = disturbance_age_struct_type, dist_impact_val = dist_impact, dist_age_impact_val = dist_age_impact)
# Apply disturbance results
disturbance_event_res <- disturbance_event[1]; age_impact = disturbance_event[2]; MR_death_impact = disturbance_event[3]; recruitment_const = disturbance_event[4]
if(time_point==1){
curr_pop <- pop_df
} else {
curr_pop <- lapply(curr_pop_end, function(x) x[curr_pop_end$time==time_point])
}
if((length(curr_pop$indiv_ID)==0)) {
stop("All dead at time ", time_point, "\n")
} else{
indiv_count=length(unique(curr_pop$indiv_ID)) + indiv_count
indiv_alive_count=nrow(curr_pop$indiv_ID)
## Recruitment
curr_pop <- recruit_rate(pop=curr_pop, recruitment_age=recruitment_age, population_min_size=population_minimum_size, recruitment_size_mean=recruitment_mean, recruitment_size_sd=recruitment_sd, recruitment_constant=recruitment_const, MR_togg=MR_recruit_imp, MR_recruit_impact_val=MR_recruit_impact)
indiv_death <- mortality_death_rate(pop=curr_pop, population_capacity=population_carrying_capacity, comp_togg=comp_imp, comp_impact_val=comp_impact, MR_togg=MR_imp, MR_death_impact_val=MR_death_impact, MR_age_impact_val=MR_age_impact, age_impact_val=age_impact, mortality_age_shiftch=mortality_age_shift)
death_df_curr <- data.frame(Dead_ID=curr_pop$indiv_ID[as.logical(indiv_death)], age=curr_pop$age[as.logical(indiv_death)], MR=curr_pop$MR[as.logical(indiv_death)], time=curr_pop$time[as.logical(indiv_death)])
death_df <- rbind(death_df, death_df_curr)
# Generate summary data if not dead
if (length(curr_pop$indiv_ID)>sum(indiv_death)){
MR_summ <- data.frame(time=time_point, MR_mean_summ=mean(curr_pop$MR[!as.logical(indiv_death)], na.rm=TRUE), MR_sd_summ=sd(curr_pop$MR[!as.logical(indiv_death)]))
MR_df <- rbind(MR_df, MR_summ)
age_summ <- data.frame(time=time_point, age_mean_summ=mean(curr_pop$age[!as.logical(indiv_death)]), age_sd_summ=sd(curr_pop$age[!as.logical(indiv_death)]),pop_size=length(curr_pop$indiv_ID))
age_df <- rbind(age_df, age_summ)
}
live_size <- data.frame(time=time_point, sum_size=length(curr_pop$indiv_ID[!as.logical(indiv_death)]))
live_size_df <- rbind(live_size_df, live_size)
curr_pop_end <- list(indiv_ID=curr_pop$indiv_ID[!as.logical(indiv_death)], age=curr_pop$age[!as.logical(indiv_death)]+1, MR=curr_pop$MR[!as.logical(indiv_death)], time=curr_pop$time[!as.logical(indiv_death)]+1)
# Save populations at user designated timepoints
if (!is.null(timepoint_pop_grab) && (time_point %in% timepoint_pop_grab)){
i <- which(time_point == timepoint_pop_grab)
pop_timepoints[[i]] <- curr_pop_end
}
# Return to base
if (as.logical(disturbance_event[1])){
age_impact = disturbance_event[5]
MR_death_impact = disturbance_event[6]
recruitment_const = disturbance_event[7]
}
# Verbose 🗣️
if(time_point%%output_timept == 0){
cat("Time at:", time_point,"\n",
"Individuals alive:", length(curr_pop_end$indiv_ID), "\n",
"Mean MR of live individuals:", mean(curr_pop$MR[!as.logical(indiv_death)]), "\n")
# Plots
print(ggplot() + geom_histogram(data=data.frame(curr_pop_end), aes(x=age, y = after_stat(density)), binwidth=10) + theme_bw() + labs(title=paste("Age density at", time_point)))
print(ggplot() + geom_point(data=data.frame(curr_pop_end), aes(x=age, y=MR)) + theme_bw() + labs(title=paste("MR by age at", time_point)))
}
}
}
curr_pop <- pop_timepoints
curr_pop <- pop_timepoints[1]
curr_pop <- pop_timepoints[5]
pop <- pop_timepoints[5]
# Current pop_size
if (length(pop$indiv_ID) < population_min_size){
recruitment_constant <- recruitment_constant*10
}
fecund_indivs <- pop$age >= recruitment_age
population_min_size=200
fecund_indivs <- pop$age >= recruitment_age
age_trans <- 1/pop$age
recruitment_indivs <- lapply(pop, function(x) x[fecund_indivs])
age_trans
pop
pop <- pop_timepoints[[4]]
fecund_indivs <- pop$age >= recruitment_age
age_trans <- 1/pop$age
recruitment_indivs <- lapply(pop, function(x) x[fecund_indivs])
recruitment_indivs_MR <- recruitment_indivs$MR
if (MR_togg){
indiv_recruitment <- rbinom(n = length(recruitment_indivs$indiv_ID), size = 1, prob = recruitment_constant * 1/(1+MR_recruit_impact_val*recruitment_indivs_MR))
} else {
indiv_recruitment <- rbinom(n = length(recruitment_indivs$indiv_ID), size = 1, prob = recruitment_constant)
}
MR_togg=T
if (MR_togg){
indiv_recruitment <- rbinom(n = length(recruitment_indivs$indiv_ID), size = 1, prob = recruitment_constant * 1/(1+MR_recruit_impact_val*recruitment_indivs_MR))
} else {
indiv_recruitment <- rbinom(n = length(recruitment_indivs$indiv_ID), size = 1, prob = recruitment_constant)
}
## Input parameters
## Population parameters
population_size = 1000
population_carrying_capacity = 3000 # If population creeps above this value, comp is used to punish the population size by increasing the minimum probability of death based on how much higher population size is than the carrying capacity
population_minimum_size = 500 # If population falls below this value, there is a 10x increased chance of recruitment
MR_mean = 1 # out of 1
MR_sd = 0.5
disturbance_chance=0 # chance of a disturbance, increases death and recruitment rate by disturbance_impact
disturbance_impact_val=5 # impacts base age & MR death factor and recruitment constant
## Parameters
## Mortality parameters
age_impact = 0.25 # scaled age inflicted increase (ensure it adds up to less than 1)
mortality_age_shift = 100 # at what age does increases in age increase chance of death
MR_imp = T # toggle on/off for MR inflicted death increase
MR_death_impact = 0.75 # linear scaled MR inflicted death increase - scales with comp + age impact value (ensure it adds up to less than 1)
MR_age_impact = 20 # scaled impact of age (value / age) on MR inflicted death increase
MR_recruit_imp = F # toggle on/off of MR affect on recruitment
MR_recruit_impact = 0.05 # impact of MR on recruitment, a multiplier of the individual MR to reduce recruitment chance
comp_imp = T # toggle on/off for competition due to carrying capacity
comp_impact = 1 # impact of competition due to carrying capacity
## Recruitment parameters
recruitment_const = 0.001 # base constant for chance of recruitment
recruitment_age = 7 # age to begin recruiting
recruitment_mean = 100 # mean for PDF of normal distribution for number of recruited individuals
recruitment_sd = recruitment_mean/2 # standard deviation of number of recruited individuals
# Disturbance parameters (ranges from super small to big impacts)
dist_imp = T # Turn on and off disturbance presence
disturbance_age_struct_type = "complex" # Impact value flat or varied by age [complex/flat]
#dist_probability = 0.1 # Probability of disturbance occurring (exponential function transformation)
dist_impact = 5 # Level of impact (multiplier)
dist_age_impact = 10 # Impact of age on disturbance 1/(1 + exp((age-val) / 10))
## Simulation parameters
time_max = 20 # how long to run sim for
output_timept = 100 # How often to report visual statistics
timepoint_pop_grab = seq(2:15) # Saves population at the end of the timepoints (post-recruitment + mortality events) - note time will be +1 than indicated as it is past incident events - saved in object pop_timepoints (list of lists)
recruitment_indivs <- lapply(pop, function(x) x[fecund_indivs])
recruitment_indivs_MR <- recruitment_indivs$MR
age_trans <- 1/fecund_indivs$age
fecund_indivs <- pop$age >= recruitment_age
fecund_indivs
age_trans <- recruitment_indivs$age
recruitment_indivs_MR <- recruitment_indivs$MR
pop=curr_pop;  recruitment_age=recruitment_age;  population_min_size=population_minimum_size;  recruitment_size_mean=recruitment_mean;  recruitment_size_sd=recruitment_sd;  recruitment_constant=recruitment_const;  MR_togg=MR_recruit_imp;  MR_recruit_impact_val=MR_recruit_impact
recruitment_indiv_MR <- recruitment_indivs$MR[as.logical(indiv_recruitment)]
new_recruit <- as.integer(rnorm(n=sum(indiv_recruitment), mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit[new_recruit<1]=1
if (MR_togg){
indiv_recruitment <- rbinom(n = length(recruitment_indivs$indiv_ID), size = 1, prob = recruitment_constant * 1/(1+MR_recruit_impact_val*recruitment_indivs_MR))
} else {
indiv_recruitment <- rbinom(n = length(recruitment_indivs$indiv_ID), size = 1, prob = recruitment_constant)
}
recruitment_indiv_MR <- recruitment_indivs$MR[as.logical(indiv_recruitment)]
new_recruit <- as.integer(rnorm(n=sum(indiv_recruitment), mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit[new_recruit<1]=1
new_recruit_MR=NULL
age_trans
1/age_trans
age_trans <- 1 - 1/recruitment_indivs$age
indiv_recruitment
indiv_recruitment
for (i in 1:length(indiv_recruitment)){
recruitment_size_mean_age <- recruitment_size_mean[i]
new_recruit = NULL
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list<1=1
new_recruit_list <- rbind(new_recruit, new_recruit_list)
}
recruitment_size_mean_age <- recruitment_size_mean[i]
new_recruit = NULL
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list<1=1
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit_list <- rbind(new_recruit, new_recruit_list)
new_recruit_list
new_recruit_list <- append(new_recruit, new_recruit_list)
new_recruit = NULL
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit_list <- append(new_recruit, new_recruit_list)
new_recruit_list
if (sum(indiv_recruitment)>0){
recruitment_indiv_MR <- recruitment_indivs$MR[as.logical(indiv_recruitment)]
if (age_imp_rec_togg){
recruitment_size_mean <- age_trans * recruitment_size_mean
for (i in 1:length(indiv_recruitment)){
recruitment_size_mean_age <- recruitment_size_mean[i]
new_recruit = NULL
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit_list <- append(new_recruit, new_recruit_list)
}
} else {
new_recruit <- as.integer(rnorm(n=1, mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit[new_recruit<1]=1
}
new_recruit_MR=NULL
for (i in 1:length(recruitment_indiv_MR)) { # For each new recruit, use parent phenotype to generate MR, dependent on MR
MR_rec_PDF <- rbeta(n=new_recruit[i], shape1=recruitment_indiv_MR[i]+1, shape2=3) # distribution of recruited individual's MR between 0 to 1
new_recruit_MR_new <- MR_rec_PDF+(recruitment_indiv_MR[i]-mean(MR_rec_PDF)) # recalibrate to make the mean the MR of parent pheno
new_recruit_MR <- append(new_recruit_MR, new_recruit_MR_new)
}
new_recruit_MR[new_recruit_MR<0]=0; new_recruit_MR[new_recruit_MR>5]=5
new_recruit_pop <- list(indiv_ID=seq(from=indiv_count+1, to=indiv_count+sum(new_recruit)),
time=rep(time_point, sum(new_recruit)),
MR=new_recruit_MR,
mortality=rep(0, sum(new_recruit)),
age=rep(1, sum(new_recruit)))
# curr_pop <- rbind(curr_pop, pop_df_simres_tp, by='indiv_ID')
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, new_recruit_pop$indiv_ID),
age=c(pop$age, new_recruit_pop$age),
MR=c(pop$MR, new_recruit_pop$MR),
time=c(pop$time, new_recruit_pop$time),
mortality=c(pop$mortality, new_recruit_pop$mortality))
return(curr_pop)
} else {
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, NULL),
age=c(pop$age, NULL),
MR=c(pop$MR, NULL),
time=c(pop$time, NULL),
mortality=c(pop$mortality, NULL))
}
age_imp_rec_togg=T
if (sum(indiv_recruitment)>0){
recruitment_indiv_MR <- recruitment_indivs$MR[as.logical(indiv_recruitment)]
if (age_imp_rec_togg){
recruitment_size_mean <- age_trans * recruitment_size_mean
for (i in 1:length(indiv_recruitment)){
recruitment_size_mean_age <- recruitment_size_mean[i]
new_recruit = NULL
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit_list <- append(new_recruit, new_recruit_list)
}
} else {
new_recruit <- as.integer(rnorm(n=1, mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit[new_recruit<1]=1
}
new_recruit_MR=NULL
for (i in 1:length(recruitment_indiv_MR)) { # For each new recruit, use parent phenotype to generate MR, dependent on MR
MR_rec_PDF <- rbeta(n=new_recruit[i], shape1=recruitment_indiv_MR[i]+1, shape2=3) # distribution of recruited individual's MR between 0 to 1
new_recruit_MR_new <- MR_rec_PDF+(recruitment_indiv_MR[i]-mean(MR_rec_PDF)) # recalibrate to make the mean the MR of parent pheno
new_recruit_MR <- append(new_recruit_MR, new_recruit_MR_new)
}
new_recruit_MR[new_recruit_MR<0]=0; new_recruit_MR[new_recruit_MR>5]=5
new_recruit_pop <- list(indiv_ID=seq(from=indiv_count+1, to=indiv_count+sum(new_recruit)),
time=rep(time_point, sum(new_recruit)),
MR=new_recruit_MR,
mortality=rep(0, sum(new_recruit)),
age=rep(1, sum(new_recruit)))
# curr_pop <- rbind(curr_pop, pop_df_simres_tp, by='indiv_ID')
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, new_recruit_pop$indiv_ID),
age=c(pop$age, new_recruit_pop$age),
MR=c(pop$MR, new_recruit_pop$MR),
time=c(pop$time, new_recruit_pop$time),
mortality=c(pop$mortality, new_recruit_pop$mortality))
return(curr_pop)
} else {
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, NULL),
age=c(pop$age, NULL),
MR=c(pop$MR, NULL),
time=c(pop$time, NULL),
mortality=c(pop$mortality, NULL))
}
recruitment_indiv_MR
recruitment_indiv_MR[i]+1
new_recruit[i]
if (sum(indiv_recruitment)>0){
recruitment_indiv_MR <- recruitment_indivs$MR[as.logical(indiv_recruitment)]
if (age_imp_rec_togg){
recruitment_size_mean <- age_trans * recruitment_size_mean
for (i in 1:length(indiv_recruitment)){
recruitment_size_mean_age <- recruitment_size_mean[i]
new_recruit = NULL
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit <- append(new_recruit, new_recruit_list)
}
} else {
new_recruit <- as.integer(rnorm(n=1, mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit[new_recruit<1]=1
}
new_recruit_MR=NULL
for (i in 1:length(recruitment_indiv_MR)) { # For each new recruit, use parent phenotype to generate MR, dependent on MR
MR_rec_PDF <- rbeta(n=new_recruit[i], shape1=recruitment_indiv_MR[i]+1, shape2=3) # distribution of recruited individual's MR between 0 to 1
new_recruit_MR_new <- MR_rec_PDF+(recruitment_indiv_MR[i]-mean(MR_rec_PDF)) # recalibrate to make the mean the MR of parent pheno
new_recruit_MR <- append(new_recruit_MR, new_recruit_MR_new)
}
new_recruit_MR[new_recruit_MR<0]=0; new_recruit_MR[new_recruit_MR>5]=5
new_recruit_pop <- list(indiv_ID=seq(from=indiv_count+1, to=indiv_count+sum(new_recruit)),
time=rep(time_point, sum(new_recruit)),
MR=new_recruit_MR,
mortality=rep(0, sum(new_recruit)),
age=rep(1, sum(new_recruit)))
# curr_pop <- rbind(curr_pop, pop_df_simres_tp, by='indiv_ID')
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, new_recruit_pop$indiv_ID),
age=c(pop$age, new_recruit_pop$age),
MR=c(pop$MR, new_recruit_pop$MR),
time=c(pop$time, new_recruit_pop$time),
mortality=c(pop$mortality, new_recruit_pop$mortality))
return(curr_pop)
} else {
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, NULL),
age=c(pop$age, NULL),
MR=c(pop$MR, NULL),
time=c(pop$time, NULL),
mortality=c(pop$mortality, NULL))
}
new_recruit
new_recruit_list
indiv_recruitment
recruitment_size_mean_age <- recruitment_size_mean[i]
new_recruit = NULL
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit <- append(new_recruit, new_recruit_list)
for (i in 1:length(indiv_recruitment)){
recruitment_size_mean_age <- recruitment_size_mean[i]
new_recruit = NULL
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit <- append(new_recruit, new_recruit_list)
}
new_recruit
new_recruit_list
length(indiv_recruitment)
new_recruit = NULL
for (i in 1:length(indiv_recruitment)){
recruitment_size_mean_age <- recruitment_size_mean[i]
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean_age, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit <- append(new_recruit, new_recruit_list)
}
new_recruit
new_recruit <- as.integer(rnorm(n=1, mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit[new_recruit<1]=1
new_recruit
if (sum(indiv_recruitment)>0){
recruitment_indiv_MR <- recruitment_indivs$MR[as.logical(indiv_recruitment)]
if (age_imp_rec_togg){
recruitment_size_mean_age <- age_trans * recruitment_size_mean
new_recruit = NULL
for (i in 1:length(indiv_recruitment)){
recruitment_size_mean <- recruitment_size_mean_age[i]
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit <- append(new_recruit, new_recruit_list)
}
} else {
new_recruit <- as.integer(rnorm(n=sum(indiv_recruitment), mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit[new_recruit<1]=1
}
new_recruit_MR=NULL
for (i in 1:length(recruitment_indiv_MR)) { # For each new recruit, use parent phenotype to generate MR, dependent on MR
MR_rec_PDF <- rbeta(n=new_recruit[i], shape1=recruitment_indiv_MR[i]+1, shape2=3) # distribution of recruited individual's MR between 0 to 1
new_recruit_MR_new <- MR_rec_PDF+(recruitment_indiv_MR[i]-mean(MR_rec_PDF)) # recalibrate to make the mean the MR of parent pheno
new_recruit_MR <- append(new_recruit_MR, new_recruit_MR_new)
}
new_recruit_MR[new_recruit_MR<0]=0; new_recruit_MR[new_recruit_MR>5]=5
new_recruit_pop <- list(indiv_ID=seq(from=indiv_count+1, to=indiv_count+sum(new_recruit)),
time=rep(time_point, sum(new_recruit)),
MR=new_recruit_MR,
mortality=rep(0, sum(new_recruit)),
age=rep(1, sum(new_recruit)))
# curr_pop <- rbind(curr_pop, pop_df_simres_tp, by='indiv_ID')
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, new_recruit_pop$indiv_ID),
age=c(pop$age, new_recruit_pop$age),
MR=c(pop$MR, new_recruit_pop$MR),
time=c(pop$time, new_recruit_pop$time),
mortality=c(pop$mortality, new_recruit_pop$mortality))
return(curr_pop)
} else {
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, NULL),
age=c(pop$age, NULL),
MR=c(pop$MR, NULL),
time=c(pop$time, NULL),
mortality=c(pop$mortality, NULL))
}
## Function - Recruitment
## Inputs
# pop - Population
# recruitment_age - age to maturity
# recruitment_constant - chance of recruitment (1 = recruits, 0 = none)
# population_min_size - Increased fecundity due to disturbance
# MR_togg - Turn on and off the Myrtle rust affect
# MR_recruit_impact_val - impact of Myrtle rust susceptibility on recruitment (multiplier)
# Note: MR is recruited based on parent pheno using beta distribution. To visualise parent MR pheno of 1-4: for (i in 0:4){hist(rbeta(n=4000, shape1=i+1, shape2 = 3)) }
##############################################
recruit_rate <- function(pop, population_min_size, recruitment_age, recruitment_size_mean, recruitment_size_sd, recruitment_constant, MR_togg, MR_recruit_impact_val, age_imp_rec_togg){
# Current pop_size
if (length(pop$indiv_ID) < population_min_size){
recruitment_constant <- recruitment_constant*10
}
# How many individuals are fecund and recruit?
fecund_indivs <- pop$age >= recruitment_age
recruitment_indivs <- lapply(pop, function(x) x[fecund_indivs])
age_trans <- 1 - 1/recruitment_indivs$age
recruitment_indivs_MR <- recruitment_indivs$MR
if (MR_togg){
indiv_recruitment <- rbinom(n = length(recruitment_indivs$indiv_ID), size = 1, prob = recruitment_constant * 1/(1+MR_recruit_impact_val*recruitment_indivs_MR))
} else {
indiv_recruitment <- rbinom(n = length(recruitment_indivs$indiv_ID), size = 1, prob = recruitment_constant)
}
# For recruited individuals, what are their MR statuses
if (sum(indiv_recruitment)>0){
recruitment_indiv_MR <- recruitment_indivs$MR[as.logical(indiv_recruitment)]
if (age_imp_rec_togg){
recruitment_size_mean_age <- age_trans * recruitment_size_mean
new_recruit = NULL
for (i in 1:length(indiv_recruitment)){
recruitment_size_mean <- recruitment_size_mean_age[i]
new_recruit_list <- as.integer(rnorm(n=1, mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit_list[new_recruit_list<1] =  1
new_recruit <- append(new_recruit, new_recruit_list)
}
} else {
new_recruit <- as.integer(rnorm(n=sum(indiv_recruitment), mean = recruitment_size_mean, sd = recruitment_size_sd)); new_recruit[new_recruit<1]=1
}
new_recruit_MR=NULL
for (i in 1:length(recruitment_indiv_MR)) { # For each new recruit, use parent phenotype to generate MR, dependent on MR
MR_rec_PDF <- rbeta(n=new_recruit[i], shape1=recruitment_indiv_MR[i]+1, shape2=3) # distribution of recruited individual's MR between 0 to 1
new_recruit_MR_new <- MR_rec_PDF+(recruitment_indiv_MR[i]-mean(MR_rec_PDF)) # recalibrate to make the mean the MR of parent pheno
new_recruit_MR <- append(new_recruit_MR, new_recruit_MR_new)
}
new_recruit_MR[new_recruit_MR<0]=0; new_recruit_MR[new_recruit_MR>5]=5
new_recruit_pop <- list(indiv_ID=seq(from=indiv_count+1, to=indiv_count+sum(new_recruit)),
time=rep(time_point, sum(new_recruit)),
MR=new_recruit_MR,
mortality=rep(0, sum(new_recruit)),
age=rep(1, sum(new_recruit)))
# curr_pop <- rbind(curr_pop, pop_df_simres_tp, by='indiv_ID')
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, new_recruit_pop$indiv_ID),
age=c(pop$age, new_recruit_pop$age),
MR=c(pop$MR, new_recruit_pop$MR),
time=c(pop$time, new_recruit_pop$time),
mortality=c(pop$mortality, new_recruit_pop$mortality))
return(curr_pop)
} else {
curr_pop <- list(
indiv_ID=c(pop$indiv_ID, NULL),
age=c(pop$age, NULL),
MR=c(pop$MR, NULL),
time=c(pop$time, NULL),
mortality=c(pop$mortality, NULL))
}
e}
