colnames(inputData[[h]]) = c("name", "ch_name",
"ch_start", "ch_end", "data", "hlink",
"cate")
} else {
inputData[[h]] = cbind.data.frame(inputData[[h]],
rep("http://", nrow(inputData[[h]])),
inputData[[h]][, 5])
inputData[[h]][, 5] = inputData[[h]][, 3]
colnames(inputData[[h]]) = c("name", "ch_name",
"ch_start", "ch_end", "data", "hlink",
"cate")
color_map = T
plots[h] = "2d"
data_based_color_map = T
color_scale = "linear"
heat_map[h] = F
legend[h] = F
}
} else {
if (!chr.2D.plot[h]) {
inputData[[h]] = cbind.data.frame(inputData[[h]],
rep(NA, nrow(inputData[[h]])), rep(NA,
nrow(inputData[[h]])))
inputData[[h]] = inputData[[h]][, c(1, 2,
3, 4, 6, 5, 7)]
colnames(inputData[[h]]) = c("name", "ch_name",
"ch_start", "ch_end", "data", "hlink",
"cate")
} else {
inputData[[h]] = cbind.data.frame(inputData[[h]],
rep(NA, nrow(inputData[[h]])), rep(NA,
nrow(inputData[[h]])))
inputData[[h]] = inputData[[h]][, c(1, 2,
3, 4, 6, 5, 7)]
inputData[[h]][, 5] = inputData[[h]][, 3]
colnames(inputData[[h]]) = c("name", "ch_name",
"ch_start", "ch_end", "data", "hlink",
"cate")
color_map = T
plots[h] = "2d"
data_based_color_map = T
color_scale = "linear"
heat_map[h] = F
legend[h] = F
}
}
}, `6` = {
if (!hlinks) {
inputData[[h]] = cbind.data.frame(inputData[[h]],
rep("http://", nrow(inputData[[h]])))
inputData[[h]] = inputData[[h]][, c(1, 2,
3, 4, 5, 7, 6)]
colnames(inputData[[h]]) = c("name", "ch_name",
"ch_start", "ch_end", "data", "hlink", "cate")
} else {
if (chr.2D.plot[h]) {
inputData[[h]] = cbind.data.frame(inputData[[h]],
rep(NA, nrow(inputData[[h]])))
colnames(inputData[[h]]) = c("name", "ch_name",
"ch_start", "ch_end", "data", "hlink",
"cate")
} else {
inputData[[h]] = cbind.data.frame(inputData[[h]],
inputData[[h]][, 5])
inputData[[h]][, 5] = inputData[[h]][, 3]
colnames(inputData[[h]]) = c("name", "ch_name",
"ch_start", "ch_end", "data", "hlink",
"cate")
color_map = T
plots[h] = "2d"
data_based_color_map = T
color_scale = "linear"
heat_map[h] = F
legend[h] = F
}
}
}, `7` = {
if (hlinks) {
colnames(inputData[[h]]) = c("name", "ch_name",
"ch_start", "ch_end", "data", "hlink", "cate")
} else {
stop(message("set the 'hlinks' property to TRUE."))
}
}, {
stop(message("The Input data contains insufficient columns. Please check the vignette for more detail."))
})
cat("Number of annotations in data set ", h, ":",
nrow(inputData[[h]]), "\n")
temp.input.df = c()
for (i in 1:nrow(inputData[[h]])) {
temp.list = mega.list.of.ranges[[h]]
names(temp.list) = ch.name.list[[h]]
temp.df = temp.list[[inputData[[h]]$ch_name[i]]]
for (j in 1:nrow(temp.df)) {
if (abs(as.integer(inputData[[h]]$ch_start[i])) >=
temp.df[j, 1] & abs(as.integer(inputData[[h]]$ch_start[i])) <=
temp.df[j, 2]) {
temp.input.df = rbind(temp.input.df, c(as.character(inputData[[h]]$name[i]),
inputData[[h]]$data[i], inputData[[h]]$cate[i],
paste(id, "-", inputData[[h]]$ch_name[i],
"-", j, "-", h, sep = ""), as.numeric(temp.df[j,
1]), as.numeric(temp.df[j, 2]), inputData[[h]]$hlink[i]))
if (abs(as.integer(inputData[[h]]$ch_end[i])) >=
temp.df[j, 1] & abs(as.integer(inputData[[h]]$ch_end[i])) <=
temp.df[j, 2]) {
}
else {
for (t in j:nrow(temp.df)) {
if (abs(as.integer(inputData[[h]]$ch_end[i])) >=
temp.df[t, 1] & abs(as.integer(inputData[[h]]$ch_end[i])) <=
temp.df[t, 2]) {
temp.input.df = rbind(temp.input.df,
c(as.character(inputData[[h]]$name[i]),
inputData[[h]]$data[i], inputData[[h]]$cate[i],
paste(id, "-", inputData[[h]]$ch_name[i],
"-", t, "-", h, sep = ""), as.numeric(temp.df[t,
1]), as.numeric(temp.df[t, 2]),
inputData[[h]]$hlink[i]))
break
}
else {
temp.input.df = rbind(temp.input.df,
c(as.character(inputData[[h]]$name[i]),
inputData[[h]]$data[i], inputData[[h]]$cate[i],
paste(id, "-", inputData[[h]]$ch_name[i],
"-", t, "-", h, sep = ""), as.numeric(temp.df[t,
1]), as.numeric(temp.df[t, 2]),
inputData[[h]]$hlink[i]))
}
}
}
}
}
}
dfff = as.data.frame(temp.input.df, stringsAsFactors = F)
colnames(dfff) = c("name", "data", "cate", "loci",
"loci_start", "loci_end", "hlink")
if (color_map) {
if (color_scale == "linear") {
dfff[, 2] = as.numeric(dfff[, 2])
}
else {
if (color_scale == "ordinal") {
dfff[, 2] = as.character(dfff[, 2])
}
}
}
else {
dfff[, 2] = rep(NA, nrow(dfff))
}
dfff[, 4] = as.character(dfff[, 4])
dfff[, 5] = as.integer(dfff[, 5])
dfff[, 6] = as.integer(dfff[, 6])
inputData[[h]] = unique(dfff)
}
}
if (segment_annotation) {
for (i in 1:length(inputData)) {
unique.names = unique(inputData[[i]]$name)
k = 1
labels.id = c()
for (j in 1:length(unique.names)) {
if (nrow(inputData[[i]][inputData[[i]]$name ==
unique.names[j], ]) == 1) {
t = inputData[[i]][inputData[[i]]$name ==
unique.names[j], ]
labels.id[k] = gsub(paste0(id, "-"), paste0(id,
"-L"), as.character(t[1, 4]))
k = k + 1
}
else {
t = inputData[[i]][inputData[[i]]$name ==
unique.names[j], ]
for (p in 1:nrow(t)) {
labels.id[k] = gsub(paste0(id, "-"), paste0(id,
"-L"), as.character(t[round((nrow(t)/2)),
4]))
k = k + 1
}
}
}
labels.ids[[i]] = labels.id
}
}
for (d in 1:length(inputData)) {
inputData[[d]] = cbind.data.frame(inputData[[d]], label = labels.ids[[d]])
}
for (o in 1:length(inputData)) {
if (plots[o] == "2d") {
inputData[[o]]$data = inputData[[o]]$data - inputData[[o]]$loci_start +
1
}
}
data.domain = list()
if (color_map) {
if (color_scale == "linear" & data_based_color_map) {
d.max = c()
d.min = c()
for (k in 1:length(inputData)) {
if (ncol(inputData[[k]]) == 8) {
if (!chr.2D.plot[k]) {
d.min = min(inputData[[k]]$data, na.rm = T)
d.max = max(inputData[[k]]$data, na.rm = T)
}
else {
if (plot_filter[[k]][2] == "byNumber") {
d.min = min(inputData[[k]]$cate, na.rm = T)
d.max = max(inputData[[k]]$cate, na.rm = T)
legend[k] = T
}
else {
d.min = min(inputData[[k]]$data, na.rm = T)
d.max = max(inputData[[k]]$data, na.rm = T)
legend[k] = F
}
}
}
if (is.null(numeric.domain)) {
data.domain[[k]] = c(d.min, d.max)
}
else {
data.domain[[k]] = numeric.domain
}
}
}
else {
if (color_scale == "ordinal" & data_based_color_map) {
if (is.null(discrete.domain)) {
for (k in 1:length(inputData)) {
d.unik = c()
if (ncol(inputData[[k]]) == 8) {
d.unik = as.character(unique(inputData[[k]]$data))
}
data.domain[[k]] = d.unik
}
}
else {
data.domain = discrete.domain
}
d.uniks = unique(unlist(data.domain))
for (y in 1:length(inputData)) {
data.domain[[y]] = d.uniks
}
}
}
}
else {
data.domain = rep(0, ploidy)
}
uniq_cates = c()
is.plotting.scatter.map = FALSE
for (o in 1:length(inputData)) {
if (length(grep(TRUE, is.na(inputData[[o]]$cate))) >=
1) {
uniq_cates = c(0, 0, 0)
}
else {
uniq_cates = c(uniq_cates, inputData[[o]]$cate)
if (!chr.2D.plot[o]) {
is.plotting.scatter.map = TRUE
}
else {
if (plot_filter[[o]][2] == "byCategory") {
is.plotting.scatter.map = TRUE
}
}
}
}
if (is.null(ch2D.cat.order)) {
uniq_cates <- (unique(uniq_cates))
}
else {
uniq_cates <- ch2D.cat.order
}
inline_col = c("red", "orange", "blue", "yellow", "purple",
"black")
colors_inline = grDevices::colors()[grep("gr(a|e)y", grDevices::colors(),
invert = T)]
col_hexa <- function(colr) {
rgb <- col2rgb(colr)[, 1]
return(rgb(rgb[1], rgb[2], rgb[3], maxColorValue = 255))
}
if (length(ch2D.colors) == 0) {
ch2D.colors = sample(colors_inline, length(uniq_cates))
ch2D.colors = as.character(vapply(ch2D.colors, col_hexa,
c("")))
}
else {
ch2D.colors = as.character(vapply(ch2D.colors, col_hexa,
c("")))
}
links.color.maps = FALSE
if (show.links) {
if (ncol(loci_links) == 5) {
links.color.maps = TRUE
}
}
if (show.links) {
if (links.color.maps) {
if (length(links.colors) == 0) {
if (is.character(loci_links[, 5])) {
links.colors = sample(colors_inline, length(unique(loci_links[,
5])))
}
else if (is.numeric(loci_links[, 5]) | is.integer(loci_links[,
5])) {
links.colors = sample(colors_inline, 2)
}
links.colors = as.character(vapply(links.colors,
col_hexa, c("")))
}
else {
links.colors = as.character(vapply(links.colors,
col_hexa, c("")))
}
}
else {
if (length(links.colors) == 0) {
links.colors = sample(colors_inline, 1)
links.colors = as.character(vapply(links.colors,
col_hexa, c("")))
}
else {
links.colors = as.character(vapply(links.colors,
col_hexa, c("")))
}
}
}
dc_empty = FALSE
dc_one = FALSE
if (length(data_colors) == 0) {
dc_empty = TRUE
}
if (length(data_colors) == 1) {
dc_one = TRUE
}
for (p in 1:length(inputData)) {
if (color_scale == "ordinal" & data_based_color_map) {
if (dc_empty) {
d.cols = sample(colors_inline, length(data.domain[[p]]))
d.cols = as.character(vapply(d.cols, col_hexa,
c("")))
data_colors[[p]] = d.cols
}
else {
if (dc_one) {
data_colors[[p]] = data_colors[[1]]
}
if (length(data_colors[[p]]) != length(data.domain[[p]])) {
stop(message("Error: the number of colors passed and levels in data are different."))
}
}
}
else {
if (color_scale == "linear" & data_based_color_map) {
a = data.domain[[p]]
if (dc_empty) {
if (a[1] < 0 & a[2] > 0) {
data_colors[[p]] = c("red", "white", "blue")
data.domain[[p]] = c(data.domain[[p]][1],
0, data.domain[[p]][2])
}
else {
if (a[1] >= 0 & a[2] >= 0) {
data_colors[[p]] = c("white", "blue")
}
}
}
else {
if (dc_one) {
data_colors[[p]] = data_colors[[1]]
}
if (a[1] < 0 & a[2] > 0) {
data.domain[[p]] = c(data.domain[[p]][1],
0, data.domain[[p]][2])
}
}
}
}
}
if (length(data_colors) > 0) {
for (p in 1:length(inputData)) {
data_colors[[p]] = as.character(vapply(data_colors[[p]],
col_hexa, c("")))
}
}
if (!show.links) {
links_loci = data.frame(src_loci = "none", targ_loci = "none")
}
else {
if (is.character(loci_links)) {
}
else if (is.data.frame(loci_links)) {
lnks = loci_links
}
src_loci = c()
targ_loci = c()
src_loci2 = c()
targ_loci2 = c()
lnks[, 2] = as.numeric(lnks[, 2])
lnks[, 4] = as.numeric(lnks[, 4])
if (!segment_annotation) {
for (i in 1:nrow(lnks)) {
src_loci[i] = inputData[[lnks[i, 2]]][inputData[[lnks[i,
2]]]$name == lnks[i, 1], ][1, 5]
targ_loci[i] = inputData[[lnks[i, 4]]][inputData[[lnks[i,
4]]]$name == lnks[i, 3], ][1, 5]
}
if (ncol(lnks) == 5) {
links_loci = data.frame(src_loci, targ_loci,
lnk_nm = paste0(lnks[, 1], "-", lnks[, 3]),
link_data = lnks[, 5], stringsAsFactors = F)
links_loci = na.omit(links_loci)
}
else {
if (ncol(lnks) == 4) {
links_loci = data.frame(src_loci, targ_loci,
lnk_nm = paste0(lnks[, 1], "-", lnks[, 3]),
link_data = rep("NA", nrow(lnks)), stringsAsFactors = F)
}
}
}
else {
links_loci = data.frame()
for (i in 1:nrow(lnks)) {
s_tdf = inputData[[lnks[i, 2]]][inputData[[lnks[i,
2]]]$name == lnks[i, 1], ]
s_rw = nrow(s_tdf)
src_loci[i] = s_tdf[1, 4]
src_loci2[i] = s_tdf[s_rw, 4]
t_tdf = inputData[[lnks[i, 4]]][inputData[[lnks[i,
4]]]$name == lnks[i, 3], ]
t_rw = nrow(t_tdf)
targ_loci[i] = t_tdf[1, 4]
targ_loci2[i] = t_tdf[t_rw, 4]
}
if (ncol(lnks) == 5) {
links_loci = data.frame(src_loci, src_loci2,
targ_loci, targ_loci2, lnk_nm = paste0(lnks[,
1], "-", lnks[, 3]), link_data = lnks[,
5], stringsAsFactors = F)
links_loci = na.omit(links_loci)
}
else {
if (ncol(lnks) == 4) {
links_loci = data.frame(src_loci, src_loci2,
targ_loci, targ_loci2, lnk_nm = paste0(lnks[,
1], "-", lnks[, 3]), link_data = rep("NA",
nrow(lnks)), stringsAsFactors = F)
}
}
}
}
cat("Visualizing..                   ")
x = list(chData = inputData, nLoci = chr.data, ploidy_n = ploidy,
title = title, cnt = cnt, ch_gap = ch_gap, top_margin = top_margin,
left_margin = left_margin, chr_width = chr_width, chr_length = chr_length,
chr_col = chr_color, heatmap = color_map, ch_domain = ch.domain,
lg_x = lg_x, lg_y = lg_y, heat_scale = color_scale,
labels = labels, div_id = id, w = canvas_width, h = canvas_height,
rng = data.domain, heat_col = data_colors, an_col = anno_col,
ch_text = chr_text, legend = legend, aggregate_func = aggregate_func,
plots = plots, tag_filter = tag_filter, plot_height = plot_height,
plot_ticks = plot_ticks, plot_color = plot_color, plot_y_domain = plot_y_domain,
ref_line = ref_line, refl_pos = refl_pos, refl_color = refl_color,
refl_stroke_w = refl_stroke_w, tagColor = tagColor,
renderHeat = heat_map, text_font_size = text_font_size,
chr_curve = chr_curve, title_font_size = title_font_size,
label_font = label_font, label_angle = label_angle,
vertical_grid = vertical_grid, grid_array = grid_array,
grid_color = grid_color, plot_filter = plot_filter,
loci_links = links_loci, uniq_cates = uniq_cates, scatter_col = ch2D.colors,
grid_text = grid_text, grid_text_size = grid_text_size,
grid_text_y = grid_text_y, scatter_mapping = is.plotting.scatter.map,
scatter_lg_x = ch2D.lg_x, scatter_lg_y = ch2D.lg_y,
show_links = show.links, seg_anno = segment_annotation,
directed_edges = directed.edges, y_chr_scale = y_chr_scale,
links_colors = links.colors, links_lg_x = links.lg_x,
links_lg_y = links.lg_y, links_color_maps = links.color.maps,
win_scale = win.scale, scale_ticks = chr.scale.ticks,
export_options = export.options, guides = guides, guides_color = guides_color,
ann_h = ann.h, display_chr = display.chr, plot_shift = plot.shift,
plot_legend_label = plot.legend.labels, cat_legend_lab = cat.legend.label,
plot_y_labs = plot.y.labels, plot_y_lab_x = plot.y.lab.x,
plot_y_lab_y = plot.y.lab.y, plot_y_lab_size = plot.y.lab.size,
scale_suffix = scale.suffix, interactivity = interactivity)
htmlwidgets::createWidget(name = "chromoMap", x, width = width,
height = height, package = "chromoMap", htmlwidgets::sizingPolicy(padding = 10,
browser.fill = TRUE))
}
chromoMap(ch.file=list(chromosomes_sort[chromosomes_sort$V1 == "MqA_CHR08",]), data.files=list(ann_merge_sorted), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1500, canvas_height = 500, left_margin = 80, interactivity = T,  lg_x = 1000, lg_y = 250, region=c("MqA_CHR08:1:19300000:19400000"), legend=T)
chromoMap(ch.file= list(chromosomes_sort), data.files=list(ann_merge), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1300, canvas_height = 700, left_margin = 80, interactivity = F, legend = T, lg_x = 1000, lg_y = 250)
ann_merge_sorted <- ann_merge %>%
mutate(type = factor(type, levels = desired_order)) %>%
arrange(type)
chromoMap(ch.file=list(chromosomes_sort[chromosomes_sort$V1 == "MqA_CHR08",]), data.files=list(ann_merge_sorted), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1500, canvas_height = 500, left_margin = 80, interactivity = T,  lg_x = 1000, lg_y = 250, region=c("MqA_CHR08:1:19300000:19400000"), legend=T)
chromoMap(ch.file=list(chromosomes_sort[chromosomes_sort$V1 == "MqA_CHR08",]), data.files=list(ann_merge_sorted), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1500, canvas_height = 500, left_margin = 80, interactivity = T,  lg_x = 1000, lg_y = 250, region=c("MqA_CHR08:1:19300000:19400000"), legend=T, discrete.domain=desired_order
chromoMap(ch.file=list(chromosomes_sort[chromosomes_sort$V1 == "MqA_CHR08",]), data.files=list(ann_merge_sorted), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1500, canvas_height = 500, left_margin = 80, interactivity = T,  lg_x = 1000, lg_y = 250, region=c("MqA_CHR08:1:19300000:19400000"), legend=T, discrete.domain=desired_order)
chromoMap(ch.file=list(chromosomes_sort[chromosomes_sort$V1 == "MqA_CHR08",]), data.files=list(ann_merge_sorted), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1500, canvas_height = 500, left_margin = 80, interactivity = T,  lg_x = 1000, lg_y = 250, region=c("MqA_CHR08:1:19300000:19400000"), legend=T, discrete.domain=desired_order)
desired_order
chromoMap(ch.file=list(chromosomes_sort[chromosomes_sort$V1 == "MqA_CHR08",]), data.files=list(ann_merge_sorted), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1500, canvas_height = 500, left_margin = 80, interactivity = T,  lg_x = 1000, lg_y = 250, region=c("MqA_CHR08:1:19300000:19400000"), legend=T, discrete.domain=list(desired_order))
desired_order
chromoMap(ch.file= list(chromosomes_sort), data.files=list(ann_merge), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1300, canvas_height = 700, left_margin = 80, interactivity = F, legend = T, lg_x = 1000, lg_y = 250, discrete.domain=list(desired_order))
chromoMap(ch.file= list(chromosomes_sort), data.files=list(ann_merge), data_based_color_map = T, data_type = "categorical", data_colors = list(c("aquamarine4", "mediumorchid1", "lightpink", "darkolivegreen2", "skyblue","darkorange4")), n_win.factor = 3, canvas_width = 1300, canvas_height = 700, left_margin = 80, interactivity = F, legend = T, lg_x = 1000, lg_y = 250, discrete.domain=list(desired_order))
# Zoom in on chr08
chromoMap(ch.file=list(chromosomes_sort[chromosomes_sort$V1 == "MqA_CHR08",]), data.files=list(ann_merge_sorted), data_based_color_map = T, data_type = "categorical", data_colors = list(c("skyblue","darkorange4", "darkolivegreen2", "aquamarine4", "mediumorchid1","lightpink")), n_win.factor = 3, canvas_width = 1500, canvas_height = 500, left_margin = 80, interactivity = T,  lg_x = 1000, lg_y = 250, region=c("MqA_CHR08:1:19300000:19400000"), legend=T, discrete.domain=list(desired_order))
# Zoom in on chr08
chromoMap(ch.file=list(chromosomes_sort[chromosomes_sort$V1 == "MqA_CHR08",]), data.files=list(ann_merge_sorted), data_based_color_map = T, data_type = "categorical", data_colors = list(c("aquamarine4", "mediumorchid1", "lightpink", "darkolivegreen2", "skyblue","darkorange4")), n_win.factor = 3, canvas_width = 1500, canvas_height = 500, left_margin = 80, interactivity = T,  lg_x = 1000, lg_y = 250, region=c("MqA_CHR08:1:19300000:19400000"), legend=T, discrete.domain=list(desired_order))
read.csv(file="~/Uni/Honours/QLD_Herb_EucTerrica/final_results.csv")
res <- read.csv(file="~/Uni/Honours/QLD_Herb_EucTerrica/final_results.csv")
res_rmdup <- unique(res)
View(res_rmdup)
